/**
 * Updated by trungquandev.com's author on August 17 2023
 * YouTube: https://youtube.com/@trungquandev
 * "A bit of fragrance clings to the hand that gives flowers!"
 */

import Joi from 'joi'
import { ObjectId } from 'mongodb'
import { GET_DB } from '~/config/mongodb'
import { OBJECT_ID_RULE, OBJECT_ID_RULE_MESSAGE } from '~/utils/validators'
import { BOARD_TYPES } from '~/utils/constants'
import { columnModel } from '~/models/columnModel'
import { cardModel } from '~/models/cardModel'
import { pagingSkipValue } from '~/utils/algorithms'
import { userModel } from '~/models/userModel'

// Defind Collection (Name $ Schema)
const BOARD_COLLECTION_NAME = 'boards'
const BOARD_COLLECTION_SCHEMA = Joi.object({
  title: Joi.string().required().min(3).max(50).trim().strict(),
  slug: Joi.string().required().min(3).trim().strict(),
  description: Joi.string().required().min(3).max(255).trim().strict(),

  type: Joi.string().valid(BOARD_TYPES.PUBLIC, BOARD_TYPES.PRIVATE).required(),

  // L∆∞u √Ω c√°c item trong m·∫£ng columnOrderIds l√† ObjectId n√™n c·∫ßn th√™m pattern cho chu·∫©n nh√©, (l√∫c ƒë·∫ßu quay video s·ªë 57 m√¨nh qu√™n nh∆∞ng sang ƒë·∫ßu video s·ªë 58 s·∫Ω c√≥ nh·∫Øc l·∫°i v·ªÅ c√°i n√†y)
  columnOrderIds: Joi.array().items(
    Joi.string().pattern(OBJECT_ID_RULE).message(OBJECT_ID_RULE_MESSAGE)
  ).default([]),

  // Nh·ªØng Admin c·ªßa c√°i board
  ownerIds: Joi.array().items(
    Joi.string().pattern(OBJECT_ID_RULE).message(OBJECT_ID_RULE_MESSAGE)
  ).default([]),

  // Nh·ªØng th√†nh vi√™n c·ªßa board
  memberIds: Joi.array().items(
    Joi.string().pattern(OBJECT_ID_RULE).message(OBJECT_ID_RULE_MESSAGE)
  ).default([]),


  createAt: Joi.date().timestamp('javascript').default(Date.now),
  updateAt: Joi.date().timestamp('javascript').default(null),
  _destroy: Joi.boolean().default(false)
})

// Ch·ªâ ƒë·ªãnh ra nh·ªØng Fields m√† ch√∫ng ta kh√¥ng mong mu·ªën cho ph√©p c·∫≠p nhtaaj trong h√†m update()
const INVALID_UPDATE_FIELDS = ['_id', 'createAt']

const validateBeforeCreate = async (data) => {
  return await BOARD_COLLECTION_SCHEMA.validateAsync(data, { abortEarly: false })
}

const createNew = async (userId, data) => {
  try {
    const valiData = await validateBeforeCreate(data)

    const newBoardToAdd = {
      ...valiData,
      ownerIds: [new ObjectId(userId)]
    }

    const createdBoard = await GET_DB().collection(BOARD_COLLECTION_NAME).insertOne(newBoardToAdd)
    return createdBoard
  } catch (error) {
    // Ph·∫£i ƒë·ªÉ new Error(error) th√¨ m·ªõi c√≥ stacktrace c√≤n ch·ªâ ƒë·ªÉ throw error th√¨ s·∫Ω kh√¥ng c√≥
    throw new Error(error)
  }
}

const findOneById = async (boardId) => {
  try {
    const result = await GET_DB().collection(BOARD_COLLECTION_NAME).findOne({ _id: new ObjectId(boardId) })
    return result
  } catch (error) {
    // Ph·∫£i ƒë·ªÉ new Error(error) th√¨ m·ªõi c√≥ stacktrace c√≤n ch·ªâ ƒë·ªÉ throw error th√¨ s·∫Ω kh√¥ng c√≥
    throw new Error(error)
  }
}

// aggregate l√† n·ªëi c√°c b·∫£ng l·∫°i ƒë·ªÉ l·∫•y d·ªØ li·ªáu
// Query t·ªïng h·ª£p (aggregate) ƒë·ªÉ l·∫•y to√†n b·ªô Columns v√† Cards thu·ªôc v·ªÅ Board
const getDetails = async (userId, boardId) => {
  try {
    const queryConditions = [
      { _id: new ObjectId(boardId) },
      { _destroy: false },
      {
        $or: [
          { ownerIds: { $all: [new ObjectId(userId)] } },
          { memberIds: { $all: [new ObjectId(userId)] } }
        ]
      }
    ]

    // H√¥m nay t·∫°m th·ªùi gi·ªëng h·ªát findOneId - v√† s·∫Ω update aggregate ti·∫øp ·ªü nh·ªØng video t·ªõi
    // const result = await GET_DB().collection(BOARD_COLLECTION_NAME).findOne({ _id: new ObjectId(id) })
    const result = await GET_DB().collection(BOARD_COLLECTION_NAME).aggregate([
      { $match: { $and: queryConditions } },
      {
        $lookup: {
          from: columnModel.COLUMN_COLLECTION_NAME,
          localField: '_id',
          foreignField: 'boardId',
          as: 'columns'
        }
      },
      {
        $lookup: {
          from: cardModel.CARD_COLLECTION_NAME,
          localField: '_id',
          foreignField: 'boardId',
          as: 'cards'
        }
      },
      {
        $lookup: {
          from: userModel.USER_COLLECTION_NAME,
          localField: 'ownerIds',
          foreignField: '_id',
          as: 'owners',
          // pipeline trong lookup l√† ƒë·ªÉ x·ª≠ l√Ω m·ªôt ho·∫∑c nhi·ªÅu lu·ªìng c·∫ßn thi·∫øt
          // $project ƒë·ªÉ ch·ªâ ƒë·ªãnh v√†i field kh√¥ng mu·ªën l·∫•y v·ªÅ b·∫±ng c√°ch g·∫Øn n√≥ gi√° tr·ªã 0
          pipeline: [{ $project: { 'password': 0, 'verifyToken': 0 } }]
        }
      },
      {
        $lookup: {
          from: userModel.USER_COLLECTION_NAME,
          localField: 'memberIds',
          foreignField: '_id',
          as: 'members',
          pipeline: [{ $project: { 'password': 0, 'verifyToken': 0 } }]
        }
      }
    ]).toArray()
    return result[0] || null
  } catch (error) {
    // Ph·∫£i ƒë·ªÉ new Error(error) th√¨ m·ªõi c√≥ stacktrace c√≤n ch·ªâ ƒë·ªÉ throw error th√¨ s·∫Ω kh√¥ng c√≥
    throw new Error(error)
  }
}

// Nhi·ªám v·ª• c·ªßa fuction n√†y l√† push m·ªôt c√°i gi√° tr·ªã columnId v√†o cu·ªëi m·∫£ng columnOrderIds c·ªßa collection boards
// ƒê·∫©y m·ªôt ph·∫ßn t·ª≠ columnId v√†o cu·ªëi m·∫£ng columnOrderIds
// D√πng $push trong mongodb ·ªü tr∆∞·ªùng h·ª£p n√†y ƒë·ªÉ ƒë·∫©y 1 ph·∫ßn t·ª≠ v√†o cu·ªëi m·∫£ng
const pushColumnOrderIds = async (column) => {
  try {
    // returnDocument c√≥ 2 gi√° tr·ªã l√† before v√† after
    // H√†m findOneAndUpdate c√≥ 1 th·ª© 2 returnDocument: before l√† tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa b·∫£n ghi tr∆∞·ªõc c·∫≠p nh·∫≠t l·∫°i c√≤n after tr·∫£ v·ªÅ gi√° tr·ªã c·ªßa b·∫£n ghi sau khi c·∫≠p nh·∫≠t l·∫°i
    const result = await GET_DB().collection(BOARD_COLLECTION_NAME).findOneAndUpdate(
      { _id: new ObjectId(column.boardId) },
      { $push: { columnOrderIds: new ObjectId(column._id) } },
      { returnDocument: 'after' }
    )

    return result.value
  } catch (error) { throw new Error(error) }
}

const update = async (boardId, updateData) => {
  try {
    // L·ªçc nh·ªØng field m√† ch√∫ng ta kh√¥ng cho ph√©p c·∫≠p nh·∫≠t linh tinh
    Object.keys(updateData).forEach(fieldName => {
      if (INVALID_UPDATE_FIELDS.includes(fieldName)) {
        delete updateData[fieldName]
      }
    })

    // ƒê·ªëi v·ªõi nh·ªØng d·ªØ li·ªáu li√™n quan ObjectId, bi·∫øn ƒë·ªïi ·ªü ƒë√¢y
    if (updateData.columnOrderIds) {
      updateData.columnOrderIds = updateData.columnOrderIds.map(_id => (new ObjectId(_id)))
    }

    const result = await GET_DB().collection(BOARD_COLLECTION_NAME).findOneAndUpdate(
      { _id: new ObjectId(boardId) },
      { $set: updateData },
      { returnDocument: 'after' } // s·∫Ω tr·∫£ v·ªÅ k·∫øt qu·∫£ m·ªõi sau khi c·∫≠p nh·∫≠t
    )

    return result.value
  } catch (error) { throw new Error(error) }
}

// L·∫•y m·ªôt ph·∫ßn t·ª≠ columnId ra kh·ªèi m·∫£ng columnOrderIds
// D√πng $pull trong mongodb ·ªü tr∆∞·ªùng h·ª£p n√†y ƒë·ªÉ l·∫•y m·ªôt ph·∫ßn t·ª≠ ra kh·ªèi m·∫£ng r·ªìi xo√° n√≥ ƒëi
const pullColumnOrderIds = async (column) => {
  try {
    const result = await GET_DB().collection(BOARD_COLLECTION_NAME).findOneAndUpdate(
      { _id: new ObjectId(column.boardId) },
      { $pull: { columnOrderIds: new ObjectId(column._id) } },
      { returnDocument: 'after' }
    )

    return result.value
  } catch (error) { throw new Error(error) }
}

const getBoards = async (userId, page, itemsPerPage) => {
  try {
    const queryConditions = [
      // ƒêi·ªÅu ki·ªán 01: Board ch∆∞a b·ªã xo√°
      { _destroy: false },
      // ƒêi·ªÅu ki·ªán 02: c√°i th·∫±ng userId ƒëang th·ª±c hi·ªán request n√†y n√≥ ph·∫£i thu·ªôc v√†o m·ªôt trong 2 c√°i m·∫£ng ownerIds ho·∫∑c memberIds, s·ª≠ d·ª•ng to√°n t·ª≠ $all c·ªßa mongdb
      {
        $or: [
          { ownerIds: { $all: [new ObjectId(userId)] } },
          { memberIds: { $all: [new ObjectId(userId)] } }
        ]
      }
    ]

    const query = await GET_DB().collection(BOARD_COLLECTION_NAME).aggregate(
      [
        { $match: { $and: queryConditions } },
        // sort title c·ªßa board theo A-Z (m·∫∑c ƒë·ªãnh s·∫Ω b·ªã ch·ªØ B hoa ƒë·ª©ng tr∆∞·ªõc ch·ªØ a th∆∞·ªùng (theo chu·∫©n b·∫£ng m√£ ASCII))
        { $sort: { title: 1 } },
        // $facet ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu lu·ªìng trong m·ªôt query
        {
          $facet: {
            // Lu·ªìng th·ª© 01: Query boards
            'queryBoards': [
              { $skip: pagingSkipValue(page, itemsPerPage) }, // B·ªè qua s·ªë l∆∞·ª£ng b·∫£n ghi c·ªßa nh∆∞ng page tr∆∞·ªõc ƒë√≥
              { $limit: itemsPerPage } // Gi·ªõi h·∫°n t·ªëi ƒëa s·ªë l∆∞·ª£ng b·∫£n ghi tr·∫£ v·ªÅ tr√™n m·ªôt page
            ],

            // Lu·ªëng th·ª© 02: Query ƒë·∫øm t·ªïng t·∫•t c·∫£ s·ªë l∆∞·ª£ng b·∫£n ghi boards trong DB v√† tr·∫£ v·ªÅ v√†o bi·∫øn: countedAllBoards
            // https://www.mongodb.com/docs/v6.0/reference/collation/#std-label-collation-document-fields
            'queryTotalBoards': [{ $count: 'countedAllBoards' }]
          }
        }
      ],
      // Khai b√°o th√™m thu·ªôc t√≠nh collation 'en' ƒë·ªÉ fix v·ª• ch·ªØ B hoa v√† a th∆∞·ªùng ·ªü tr√™n
      { collation: { locale: 'en' } }
    ).toArray()

    // console.log('üöÄ ~ getBoards ~ query:', query)

    const res = query[0]

    return {
      boards: res.queryBoards || [],
      totalBoards: res.queryTotalBoards[0]?.countedAllBoards || 0
    }
  } catch (error) { throw new Error(error) }
}

export const boardModel = {
  BOARD_COLLECTION_NAME,
  BOARD_COLLECTION_SCHEMA,
  createNew,
  findOneById,
  getDetails,
  pushColumnOrderIds,
  update,
  pullColumnOrderIds,
  getBoards
}
